Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANDEQUAL
    APOSTROPHE
    ARRAY
    ARROW
    ATTACH
    BREAK
    CASE
    CATCH
    CLASS
    COLON
    COMMENTS
    CONTAINS
    CONTINUE
    COUNT
    CURLYRIGHTBRACKET
    CURRENT
    DECLARE
    DECREMENT
    DEFAULT
    DIE
    DIVIDE
    DO
    DOLLARSIGN
    DOT
    DOUBLECOLON
    ECHO
    ELSE
    ELSEIF
    ENDFOR
    ENDFOREACH
    ENDIF
    EQUALS
    EXIT
    EXTENDS
    FIXEDARRAY
    FOR
    FOREACH
    GOTO
    GREATERTHAN
    GREATERTHANEQ
    HEAP
    IDENTICAL
    IF
    INCREMENT
    INTDIVIDE
    LESSTHAN
    LESSTHANEQ
    MAXHEAP
    MINHEAP
    MINUS
    MODULE
    NEW
    NOTIDENTICAL
    OBJECTSTORAGE
    OR
    PLUS
    POP
    POWERBY
    PRIORITYQUEUE
    PUBLIC
    PUSH
    QUEUE
    SIMPLEARROW
    STACK
    STATIC
    STRING
    SWITCH
    TIMES
    TRY
    WHILE
    XOR

Grammar

Rule 0     S' -> sentence
Rule 1     sentence -> print
Rule 2     sentence -> assignment
Rule 3     sentence -> function
Rule 4     sentence -> return
Rule 5     assignment -> IDENTIFIER ASSINGMENT values SEMICOLON
Rule 6     print -> PRINT LBRACKET values RBRACKET SEMICOLON
Rule 7     print -> PRINT LBRACKET RBRACKET SEMICOLON
Rule 8     input -> FGETS LBRACKET RBRACKET SEMICOLON
Rule 9     values -> value
Rule 10    values -> value COMMA values
Rule 11    value -> INTEGER
Rule 12    value -> FLOAT
Rule 13    value -> IDENTIFIER
Rule 14    value -> TRUE
Rule 15    value -> FALSE
Rule 16    function -> FUNCTION NAMEFUNCTION LPAREN parameter RPAREN CURLYLEFTBRACKET
Rule 17    parameter -> IDENTIFIER
Rule 18    parameter -> IDENTIFIER COMMA parameter
Rule 19    function -> NAMEFUNCTION LPAREN parameter RPAREN
Rule 20    return -> RETURN IDENTIFIER SEMICOLON

Terminals, with rules where they appear

AND                  : 
ANDEQUAL             : 
APOSTROPHE           : 
ARRAY                : 
ARROW                : 
ASSINGMENT           : 5
ATTACH               : 
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 10 18
COMMENTS             : 
CONTAINS             : 
CONTINUE             : 
COUNT                : 
CURLYLEFTBRACKET     : 16
CURLYRIGHTBRACKET    : 
CURRENT              : 
DECLARE              : 
DECREMENT            : 
DEFAULT              : 
DIE                  : 
DIVIDE               : 
DO                   : 
DOLLARSIGN           : 
DOT                  : 
DOUBLECOLON          : 
ECHO                 : 
ELSE                 : 
ELSEIF               : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
EQUALS               : 
EXIT                 : 
EXTENDS              : 
FALSE                : 15
FGETS                : 8
FIXEDARRAY           : 
FLOAT                : 12
FOR                  : 
FOREACH              : 
FUNCTION             : 16
GOTO                 : 
GREATERTHAN          : 
GREATERTHANEQ        : 
HEAP                 : 
IDENTICAL            : 
IDENTIFIER           : 5 13 17 18 20
IF                   : 
INCREMENT            : 
INTDIVIDE            : 
INTEGER              : 11
LBRACKET             : 6 7 8
LESSTHAN             : 
LESSTHANEQ           : 
LPAREN               : 16 19
MAXHEAP              : 
MINHEAP              : 
MINUS                : 
MODULE               : 
NAMEFUNCTION         : 16 19
NEW                  : 
NOTIDENTICAL         : 
OBJECTSTORAGE        : 
OR                   : 
PLUS                 : 
POP                  : 
POWERBY              : 
PRINT                : 6 7
PRIORITYQUEUE        : 
PUBLIC               : 
PUSH                 : 
QUEUE                : 
RBRACKET             : 6 7 8
RETURN               : 20
RPAREN               : 16 19
SEMICOLON            : 5 6 7 8 20
SIMPLEARROW          : 
STACK                : 
STATIC               : 
STRING               : 
SWITCH               : 
TIMES                : 
TRUE                 : 14
TRY                  : 
WHILE                : 
XOR                  : 
error                : 

Nonterminals, with rules where they appear

assignment           : 2
function             : 3
input                : 
parameter            : 16 18 19
print                : 1
return               : 4
sentence             : 0
value                : 9 10
values               : 5 6 10

Parsing method: LALR

state 0

    (0) S' -> . sentence
    (1) sentence -> . print
    (2) sentence -> . assignment
    (3) sentence -> . function
    (4) sentence -> . return
    (6) print -> . PRINT LBRACKET values RBRACKET SEMICOLON
    (7) print -> . PRINT LBRACKET RBRACKET SEMICOLON
    (5) assignment -> . IDENTIFIER ASSINGMENT values SEMICOLON
    (16) function -> . FUNCTION NAMEFUNCTION LPAREN parameter RPAREN CURLYLEFTBRACKET
    (19) function -> . NAMEFUNCTION LPAREN parameter RPAREN
    (20) return -> . RETURN IDENTIFIER SEMICOLON

    PRINT           shift and go to state 6
    IDENTIFIER      shift and go to state 7
    FUNCTION        shift and go to state 8
    NAMEFUNCTION    shift and go to state 9
    RETURN          shift and go to state 10

    sentence                       shift and go to state 1
    print                          shift and go to state 2
    assignment                     shift and go to state 3
    function                       shift and go to state 4
    return                         shift and go to state 5

state 1

    (0) S' -> sentence .



state 2

    (1) sentence -> print .

    $end            reduce using rule 1 (sentence -> print .)


state 3

    (2) sentence -> assignment .

    $end            reduce using rule 2 (sentence -> assignment .)


state 4

    (3) sentence -> function .

    $end            reduce using rule 3 (sentence -> function .)


state 5

    (4) sentence -> return .

    $end            reduce using rule 4 (sentence -> return .)


state 6

    (6) print -> PRINT . LBRACKET values RBRACKET SEMICOLON
    (7) print -> PRINT . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 11


state 7

    (5) assignment -> IDENTIFIER . ASSINGMENT values SEMICOLON

    ASSINGMENT      shift and go to state 12


state 8

    (16) function -> FUNCTION . NAMEFUNCTION LPAREN parameter RPAREN CURLYLEFTBRACKET

    NAMEFUNCTION    shift and go to state 13


state 9

    (19) function -> NAMEFUNCTION . LPAREN parameter RPAREN

    LPAREN          shift and go to state 14


state 10

    (20) return -> RETURN . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 15


state 11

    (6) print -> PRINT LBRACKET . values RBRACKET SEMICOLON
    (7) print -> PRINT LBRACKET . RBRACKET SEMICOLON
    (9) values -> . value
    (10) values -> . value COMMA values
    (11) value -> . INTEGER
    (12) value -> . FLOAT
    (13) value -> . IDENTIFIER
    (14) value -> . TRUE
    (15) value -> . FALSE

    RBRACKET        shift and go to state 17
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    values                         shift and go to state 16
    value                          shift and go to state 18

state 12

    (5) assignment -> IDENTIFIER ASSINGMENT . values SEMICOLON
    (9) values -> . value
    (10) values -> . value COMMA values
    (11) value -> . INTEGER
    (12) value -> . FLOAT
    (13) value -> . IDENTIFIER
    (14) value -> . TRUE
    (15) value -> . FALSE

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    values                         shift and go to state 24
    value                          shift and go to state 18

state 13

    (16) function -> FUNCTION NAMEFUNCTION . LPAREN parameter RPAREN CURLYLEFTBRACKET

    LPAREN          shift and go to state 25


state 14

    (19) function -> NAMEFUNCTION LPAREN . parameter RPAREN
    (17) parameter -> . IDENTIFIER
    (18) parameter -> . IDENTIFIER COMMA parameter

    IDENTIFIER      shift and go to state 27

    parameter                      shift and go to state 26

state 15

    (20) return -> RETURN IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 28


state 16

    (6) print -> PRINT LBRACKET values . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 29


state 17

    (7) print -> PRINT LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 30


state 18

    (9) values -> value .
    (10) values -> value . COMMA values

    RBRACKET        reduce using rule 9 (values -> value .)
    SEMICOLON       reduce using rule 9 (values -> value .)
    COMMA           shift and go to state 31


state 19

    (11) value -> INTEGER .

    COMMA           reduce using rule 11 (value -> INTEGER .)
    RBRACKET        reduce using rule 11 (value -> INTEGER .)
    SEMICOLON       reduce using rule 11 (value -> INTEGER .)


state 20

    (12) value -> FLOAT .

    COMMA           reduce using rule 12 (value -> FLOAT .)
    RBRACKET        reduce using rule 12 (value -> FLOAT .)
    SEMICOLON       reduce using rule 12 (value -> FLOAT .)


state 21

    (13) value -> IDENTIFIER .

    COMMA           reduce using rule 13 (value -> IDENTIFIER .)
    RBRACKET        reduce using rule 13 (value -> IDENTIFIER .)
    SEMICOLON       reduce using rule 13 (value -> IDENTIFIER .)


state 22

    (14) value -> TRUE .

    COMMA           reduce using rule 14 (value -> TRUE .)
    RBRACKET        reduce using rule 14 (value -> TRUE .)
    SEMICOLON       reduce using rule 14 (value -> TRUE .)


state 23

    (15) value -> FALSE .

    COMMA           reduce using rule 15 (value -> FALSE .)
    RBRACKET        reduce using rule 15 (value -> FALSE .)
    SEMICOLON       reduce using rule 15 (value -> FALSE .)


state 24

    (5) assignment -> IDENTIFIER ASSINGMENT values . SEMICOLON

    SEMICOLON       shift and go to state 32


state 25

    (16) function -> FUNCTION NAMEFUNCTION LPAREN . parameter RPAREN CURLYLEFTBRACKET
    (17) parameter -> . IDENTIFIER
    (18) parameter -> . IDENTIFIER COMMA parameter

    IDENTIFIER      shift and go to state 27

    parameter                      shift and go to state 33

state 26

    (19) function -> NAMEFUNCTION LPAREN parameter . RPAREN

    RPAREN          shift and go to state 34


state 27

    (17) parameter -> IDENTIFIER .
    (18) parameter -> IDENTIFIER . COMMA parameter

    RPAREN          reduce using rule 17 (parameter -> IDENTIFIER .)
    COMMA           shift and go to state 35


state 28

    (20) return -> RETURN IDENTIFIER SEMICOLON .

    $end            reduce using rule 20 (return -> RETURN IDENTIFIER SEMICOLON .)


state 29

    (6) print -> PRINT LBRACKET values RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 36


state 30

    (7) print -> PRINT LBRACKET RBRACKET SEMICOLON .

    $end            reduce using rule 7 (print -> PRINT LBRACKET RBRACKET SEMICOLON .)


state 31

    (10) values -> value COMMA . values
    (9) values -> . value
    (10) values -> . value COMMA values
    (11) value -> . INTEGER
    (12) value -> . FLOAT
    (13) value -> . IDENTIFIER
    (14) value -> . TRUE
    (15) value -> . FALSE

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    IDENTIFIER      shift and go to state 21
    TRUE            shift and go to state 22
    FALSE           shift and go to state 23

    value                          shift and go to state 18
    values                         shift and go to state 37

state 32

    (5) assignment -> IDENTIFIER ASSINGMENT values SEMICOLON .

    $end            reduce using rule 5 (assignment -> IDENTIFIER ASSINGMENT values SEMICOLON .)


state 33

    (16) function -> FUNCTION NAMEFUNCTION LPAREN parameter . RPAREN CURLYLEFTBRACKET

    RPAREN          shift and go to state 38


state 34

    (19) function -> NAMEFUNCTION LPAREN parameter RPAREN .

    $end            reduce using rule 19 (function -> NAMEFUNCTION LPAREN parameter RPAREN .)


state 35

    (18) parameter -> IDENTIFIER COMMA . parameter
    (17) parameter -> . IDENTIFIER
    (18) parameter -> . IDENTIFIER COMMA parameter

    IDENTIFIER      shift and go to state 27

    parameter                      shift and go to state 39

state 36

    (6) print -> PRINT LBRACKET values RBRACKET SEMICOLON .

    $end            reduce using rule 6 (print -> PRINT LBRACKET values RBRACKET SEMICOLON .)


state 37

    (10) values -> value COMMA values .

    RBRACKET        reduce using rule 10 (values -> value COMMA values .)
    SEMICOLON       reduce using rule 10 (values -> value COMMA values .)


state 38

    (16) function -> FUNCTION NAMEFUNCTION LPAREN parameter RPAREN . CURLYLEFTBRACKET

    CURLYLEFTBRACKET shift and go to state 40


state 39

    (18) parameter -> IDENTIFIER COMMA parameter .

    RPAREN          reduce using rule 18 (parameter -> IDENTIFIER COMMA parameter .)


state 40

    (16) function -> FUNCTION NAMEFUNCTION LPAREN parameter RPAREN CURLYLEFTBRACKET .

    $end            reduce using rule 16 (function -> FUNCTION NAMEFUNCTION LPAREN parameter RPAREN CURLYLEFTBRACKET .)

